---
#Setting ip tables 
- lineinfile: dest=/etc/sysctl.conf line='net.bridge.bridge-nf-call-ip6tables = 1' state=present
- lineinfile: dest=/etc/sysctl.conf line='net.bridge.bridge-nf-call-iptables = 1' state=present
#Running kubeadm init 
- name: initialize kube
  shell: "kubeadm reset --force && sysctl -p && kubeadm init --apiserver-advertise-address=10.0.0.10 --pod-network-cidr=10.244.0.0/16"
  args:
    #Creates a file if it doesnt exist
    #creates: /etc/kubeadm-join.sh
    #Registers output of command on variable kubeadm_out
  register: kubeadm_out
#Appends the contenty of the variable to the file, will run if the file has content with the join command
- lineinfile:
    path: /etc/kubeadm-join.sh
    line: "{{kubeadm_out.stdout_lines[-1]}}"
    create: yes
  when: kubeadm_out.stdout.find("kubeadm join") != -1
#Starts to enable the kubelet service
- service: name=kubelet state=started enabled=yes
#Checks that the /etc/kubectl directory exists
- file: name=/etc/kubectl state=directory
#Fix for the proxy container to get the new proxy config
- name: fix configmap for proxy
  shell: >
    export KUBECONFIG=/etc/kubernetes/admin.conf;
    kubectl -n kube-system get cm/kube-proxy -o yaml
    | sed -e 's!clusterCIDR: ""!clusterCIDR: "10.0.0.0/24"!' >/etc/kubectl/kube-proxy.map ;
    kubectl -n kube-system replace cm/kube-proxy -f  /etc/kubectl/kube-proxy.map;
    #Deletes the proxy pod and it will replace itself with the new configuration
    kubectl -n kube-system delete pods -l k8s-app=kube-proxy
  args:
    creates: /etc/kubectl/kube-proxy.map #Checks if the file has been created

####Part that configures the network for the pod's to communicate.

- sysctl: name=net.bridge.bridge-nf-call-ip6tables value=1 state=present reload=yes sysctl_set=yes
- sysctl: name=net.bridge.bridge-nf-call-iptables value=1 state=present reload=yes sysctl_set=yes

- name: install weave net
  shell: >
    export KUBECONFIG=/etc/kubernetes/admin.conf;
    export kubever=$(sudo kubectl version | base64 | tr -d '\n');
    curl --location "https://cloud.weave.works/k8s/net?k8s-version=$kubever" >/etc/kubectl/weave.yml;
    kubectl apply -f /etc/kubectl/weave.yml
- shell: >
    export KUBECONFIG=/etc/kubernetes/admin.conf;
    kubectl get pods -n kube-system -l name=weave-net
  register: result
  until: result.stdout.find("Running") != -1 ##Starts a loop to check when the weave pod is running
  retries: 100
  delay: 10

###export new config for all users
- lineinfile: 
    path: /etc/environment
    line: 'export KUBECONFIG=/etc/kubernetes/admin.conf'